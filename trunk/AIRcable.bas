@ERASE

0 REM this is the base code for all the AIRcable OS products
0 REM we take the AIRcable SMD/Mini as our base device

0 REM moved from UART command line to SPP as default.

0 REM let's reserve the first 30 lines for internal stuff

0 REM $1 is the version of the command line
1 0.6a

0 REM defaults setting for mode
0 REM uncomment the one you want to use as default
0 REM service slave
2 1110
0 REM service master 3110
0 REM cable slave 1010
0 REM cable master 3010
0 REM idle 0010

0 REM $3 stores the mode configuration
0 REM $3[0] = 0 48 means idle
0 REM $3[0] = 1 49 means pairing as slave
0 REM $3[0] = 2 50 means paired as slave           
0 REM $3[0] = 3 51 means pairing as master
0 REM $3[0] = 4 52 means paired as master
0 REM $3[0] = 5 53 means relay pairing
0 REM $3[0] = 6 54 means relay paired
0 REM $3[0] = 7 55 means relay slave connected, master connecting
0 REM $3[0] = 8 56 means relay connected

0 REM $3[1] = 0 48 cable mode
0 REM $3[1] = 1 49 service mode
0 REM $3[1] = 2 50 relay mode

0 REM $3[2] = 0 48 device found / module paired
0 REM $3[2] = 1 49 inquiry needed

0 REM the numbers that are missing had been removed, camed from UART
0 REM $3[3] = 0 48 means automatic
0 REM $3[3] = 1 49 means manual idle.
0 REM $3[3] = 3 51 manual inq
0 REM $3[3] = 4 52 manual master, connecting
0 REM $3[3] = 6 54 manual master, connected
0 REM $3[3] = 7 55 relay pairing

0 REM $3[4] = 1 49 means service relay mode
0 REM $3[4] = 2 50 means cable relay mode

0 REM $3[5] stores previous mode when accessing SPP command line.

0 REM if var K = 1 then we must do a slave-1

0 REM $3[4] is the amount of time we trigger alarms while on manual
0 REM need service-master mode, does not store pairing information starts 
0 REM with pairing
3 Z

0 REM $4 IS RESERVED FOR PAIRED ADDR
4 0

0 REM $5 stores the name of the devices we only want during inquiry
5 AIRcable

0 REM $6 stores the filter address we filter on during inquiry
6 00A8FFFFFF

0 REM $7 for paired master addresses
7 0

0 REM $8 stores the pio settings
0 REM $8[0] BLUE LED
0 REM $8[1] GREEN LED
0 REM $8[2] BUTTON
0 REM $8[3] RS232 POWER OFF
0 REM $8[4] RS232 POWER ON
0 REM $8[5] DTR
0 REM $8[6] DSR
0 REM $8[7] POWER SWITCH
0 REM $8[8] COMMAND LINE PIN
0 REM $8[9] BATTERY MEASURMENT ENABLED 0 - 1
0 REM LINE $12 STORES THE DEFAULT VALUE
0 REM z means unitializated
8 z

0 REM Debug settings
0 REM first char is for Z enabled/disabled
0 REM second is for dumping states
0 REM third for Obex/ObexFTP
0 REM 0 48 Enabled only on command line
0 REM 1 49 Always enabled
0 REM 2 50 Always Disabled
9 000

0 REM $10 stores our friendly name
10 AIRcableSMD

0 REM $11 stores our PIN
11 1234

0 REM DEFAULT pio settings IN ORDER
0 REM BLUE LED
0 REM GREEN LED
0 REM BUTTON
0 REM RS232 POWER OFF
0 REM RS232 POWER ON
0 REM DTR
0 REM DSR
0 REM POWER SWITCH
0 REM COMMAND LINE PIN
0 REM BATERY MEASURMENT ENABLED
12 K000000000

0 REM PIO_IRQ SETTINGS@
0 REM $13 Button + Power Switch + Command Line. For no connections
0 REM autogenerated in first bootup
13 0
0 REM $14 button + DSR interrupt + Power Switch. While connected
0 REM autogenerated in first bootup
14 0

0 REM 15 is the settings for the uart when a connection is made
0 REM 0 means read from dip swithces
0 REM any other number is converted to an int.
15 1152

0 REM 16 this is the time that the Obex/ObexFTP will be available after
0 REM boot up
16 120

0 REM on variable we store the baud rate setting.
0 REM this variable is initializated by @SENSOR
0 REM and is not set until a connection is stablished


0 REM $20 is used for relay mode, it stores the master address
20 000000000000

0 REM $21 PIO_IRQ for off mode, only Power Switch measurment.
21 0

0 REM 22 Parity Settings
0 REM [0] = "0" = none
0 REM "1" = even
0 REM "2" = odd
0 REM [1] = "0" 1 stop bit
0 REM "1" 2 stop bits
22 00

0 REM 23 unique settings
0 REM [0] = "0" don't add nothing
0 REM [0] = "1" add unique name
0 REM [0] = "2" add unique name, generate pin
23 1

0 REM $39 RESERVED
39 RESERVED

0 REM THIS TURNS A CHAR AT $0[E] into
0 REM and integer in F
40 IF $0[E] > 57 THEN 43
41 F = $0[E] - 48;
42 RETURN
0 REM WE NEED TO ADD 10 BECAUSE "A" IS NOT 0
0 REM IS 10
43 F = $0[E] - 55;
44 RETURN


@INIT 45
45 Z = $9[0] - 48;
46 A = baud 1152
47 IF $9[1] = 48 THEN 49
48 PRINTS "@INIT\n\r";
49 IF $8[0] <> 122 THEN 73

0 REM first boot.
50 $0[0] = 0
51 PRINTV $12
52 FOR E = 0 TO 9
53 GOSUB 40
54 $8[E] = F + 48
55 NEXT E
56 $8[E+1] = 0
57 $0[0] = 0;
58 PRINTV"P000000000000";
59 $13 = $0;
60 $14 = $0;
61 $21 = $0;

62 IF $8[2] = 48 THEN 65;
63 $13[$8[2]-48] = 49;
64 $14[$8[2]-48] = 49;
65 IF $8[6] = 48 THEN 67;
66 $14[$8[6]-48] = 49;
67 IF $8[7] = 48 THEN 71;
68 $13[$8[7]-48] = 49;
69 $14[$8[7]-48] = 49;
70 $21[$8[7]-48] = 49;
71 IF $8[8] = 48 THEN 73;
72 $13[$8[8]-48] = 49;

73 GOSUB 935

74 H = 1

0 REM button as input
75 A = pioin ($8[2]-48);
0 REM bias pull up to high
76 A = pioset ($8[2]-48);
0 REM green LED output, off
77 A=pioout ($8[1]-48);
78 A=pioclr ($8[1]-48);
0 REM blue LED output, off
79 A=pioout ($8[0]-48)
0 REM RS232_off set, switch on RS232
80 A=pioout ($8[3]-48)
81 A=pioset ($8[3]-48)
0 REM RS232_on power on, switch to automatic later
82 A=pioout ($8[4]-48)
83 A=pioset ($8[4]-48)
0 REM DTR output set -5V
84 A=pioout ($8[5]-48)
85 A=pioset ($8[5]-48)
0 REM DSR input
0 REM this line is changed by serial OS code, so update
86 A=pioin ($8[6]-48)
0 REM Command line Enable switch
87 A = pioin ($8[8]-48)
88 A = pioset ($8[8]-48)

0 REM start baud rate
0 REM 80 A = uartcfg 136
0 REM 81 A = nextsns 6
0 REM reset for pairing timeout
89 A = zerocnt
90 IF $9[1] = 48 THEN 92
91 PRINTS "Command Line ready

0 REM state initialize
92 IF $3[0] <> 90 THEN 94
0 REM newly updated BASIC program, goto SLAVE mode
93 $3 = $2;

0 REM init button state
94 W = 0

0 REM blue LED off
95 A = pioclr ($8[0]-48)
96 J = 0

97 $3[3] = 48;

0 REM should go to mode dump
98 IF $9[1] = 48 THEN 100
99 GOSUB 690

0 REM let's start up, green LED on
100 A = pioset ($8[1]-48)

101 K = 1
102 H = 1
103 M = 0
104 IF H = 0 THEN 114
105 IF $8[7] = 48 THEN 111
0 REM power switch detecting.
106 A = pioset ($8[7]-48)
107 A = pioin ($8[7]-48)
108 WAIT 1
109 A = pioget ($8[7]-48);
110 IF A = 0 THEN 116;
111 H = 0;
112 L = 1
113 N = 0;
0 REM set PIO_IRQ to not connected mode
114 A=pioirq $13
115 RETURN

0 REM we just got back from a reboot, with the power switch off.
0 REM then we turn off:
0 REM 	alarms
0 REM 	sensors
0 REM 	uart interrupt
0 REM 	and go invisible
116 M = 1;
117 ALARM 0;
118 A = nextsns 0;
119 A = pioclr ($8[0]-48);
120 A = pioclr ($8[1]-48);
121 A = pioclr ($8[2]-48);
122 A = pioclr ($8[3]-48);
123 A = pioclr ($8[4]-48);
124 A = pioclr ($8[5]-48);
125 A = pioclr ($8[6]-48);
126 A = slave -1
127 A = disable 3
128 A = pioirq $21;
129 RETURN


0 REM Obex/ObexFTP timing handler
0 REM this code is also called from the command line on exit
130 B = readcnt
131 C = atoi $16
132 IF B < C THEN 139
133 GOSUB 137
134 H = 0
135 GOTO 362

136 IF $9[2] = 49 THEN 138
137 A = disable 3
138 RETURN

139 ALARM 30
140 GOTO 362

@SENSOR 141
141 IF $22[2] > 48 THEN 154
142 IF $8[9] = 48 THEN 153
143 A = sensor $0
144 V = atoi $0[5]
145 A = nextsns 600
146 IF V < 3000 THEN 148
147 GOTO 151

148 N = 1
149 ALARM 5
150 GOTO 153

151 N = 0
152 ALARM 5
153 RETURN
0 REM baud rate selector switch implementation
0 REM thresholds (medians) for BAUD rate switch
0 REM AIO0 has voltage, use 1000 (3e8) as analog correction factor
0 REM if it is smaller than this, then switch is set
0 REM voltages: 160, 450, 650, 810, 930, 1020, 1090, >
0 REM switch    111, 110, 101, 100, 011,  010,  001, 000
0 REM baud:    1152,  96, 384, 000, 576,   48,  192, 321
154 $22[2] = $22[2] -1
155 IF $15[0] = 48 THEN 160;
0 REM we need to convert from string to integer, because we are on internal
0 REM baud rate, if an error ocurs while converting, then we switch
0 REM to the dip's automatically
156 C = atoi $15;
157 IF C = 0 THEN 160;
158 I = C;
159 GOTO 185
160 C = sensor $0;
161 IF C < 160 THEN 170;
162 IF C < 450 THEN 172;
163 IF C < 650 THEN 174;
164 IF C < 810 THEN 176;
165 IF C < 930 THEN 178;
166 IF C < 1020 THEN 180;
167 IF C < 1090 THEN 182;
168 I = 321;
169 GOTO 198;

170 I = 8;
171 GOTO 225;
172 I = 3;
173 GOTO 225;
174 I = 5;
175 GOTO 225;
176 I = 1152;
177 GOTO 159;
178 I = 6;
179 GOTO 225;
180 I = 2;
181 GOTO 225;
182 I = 4;
183 GOTO 225;

184 RETURN

185 IF I = 12 THEN 200
186 IF I = 24 THEN 202
187 IF I = 48 THEN 204
188 IF I = 96 THEN 206
189 IF I = 208 THEN 208
190 IF I = 384 THEN 210
191 IF I = 576 THEN 212
192 IF I = 769 THEN 214
193 IF I = 1152 THEN 216
194 IF I = 2304 THEN 218
195 IF I = 4608 THEN 220
196 IF I = 9216 THEN 222
197 IF I = 13824 THEN 224
0 REM wrong settings for baud rate, we don't have a fixed value, we can't do
0 REM parity and stop bits
198 A = baud I
199 RETURN

200 I = 0
201 GOTO 225
202 I = 1
203 GOTO 225
204 I = 2
205 GOTO 225
206 I = 3
207 GOTO 225
208 I = 4
209 GOTO 225
210 I = 5
211 GOTO 225
212 I = 6
213 GOTO 225
214 I = 7
215 GOTO 225
216 I = 8
217 GOTO 225
218 I = 9
219 GOTO 225
220 I = 10
221 GOTO 225
222 I = 11
223 GOTO 225
224 I = 12

225 IF $22[0] = 49 THEN 228
226 IF $22[0] = 50 THEN 230
227 GOTO 231
228 I = I + 64
229 GOTO 231
230 I = I + 32
231 IF $22[1] = 49 THEN 234
232 GOTO 234
233 I = I + 16
234 I = I + 128
235 A = uartcfg I
236 RETURN


0 REM handle button press and DSR, status is $0
@PIO_IRQ 237
237 IF $9[1] = 48 THEN 252;
238 PRINTS "PIO_IRQ\n\r"
239 PRINTS $0

240 IF L = 1 THEN 251
241 IF $8[7] = 48 THEN 252
242 A = pioget ($8[7]-48)
243 IF A = 1 THEN 247

0 REM we were turned off reboot.
0 REM when we boot up again, we turn off anything.
244 A = reboot
245 WAIT 3
246 RETURN


247 IF M = 0 THEN 252
0 REM we were turn on, reboot and start up everything on again.
248 A = reboot
249 WAIT 3
250 RETURN

251 L = 0

252 A = pioget($8[8]-48);
253 IF A = 1 THEN 255
254 ALARM 1

0 REM press button starts alarm for long press recognition
255 IF $0[$8[2]-48]=48THEN293
0 REM speaciall tratement for Button release on rebooting
256 IF W = 3 THEN 184
0 REM was it a release, now handle it
257 IF W <> 0 THEN 266

0 REM button no pressed, button not released
0 REM when DSR on the RS232 changes
258 IF $0[$8[6]-48]=48THEN261;
259 IF $0[$8[6]-48]=49THEN263;
260 RETURN
0 REM modem control to the other side
261 A = modemctl 0;
262 RETURN
263 A = modemctl 1;
264 RETURN

0 REM released with W == 2, alarm already handled it, exit
265 IF W = 2 THEN 289

0 REM this is a short button press
0 REM if we are on idle mode, then we switch to cable slave
0 REM if we are on service or cable unnconnected then switch master <-> slave
0 REM there is a slight difference between this spec, and the last one
0 REM on the last one any button press while on service did nothing.
266 B = status;
267 IF B < 10000 THEN 269;
268 B = B - 10000;
269 IF B > 0 THEN 298;
270 IF $3[0] = 48 THEN 280;
271 IF $3[0] > 50 THEN 280;

0 REM we were slave, now lets go to master.
272 ALARM 0
273 IF $9[1] = 48 THEN 275;
274 PRINTS "-> pair as master";
275 $3[0] = 51;
276 W = 0;
277 B = zerocnt;
278 A = slave-1
279 RETURN

0 REM switch to pair as slave
280 ALARM 0
281 IF $9[1] = 48 THEN 283
282 PRINTS "-> pair as slave\n"
283 $3[0] = 49
284 W = 0
285 A = zerocnt;
0 REM cancel inquiries
286 A = cancel
287 ALARM 1
288 RETURN

289 IF $9[1] = 48 THEN 291
290 PRINTS"Handled, ignore\n\r"
291 W = 0
292 RETURN


0 REM button press, recognize it and start ALARM for long press
293 IF $9[1] = 48 THEN 295
294 PRINTS "Button press\n\r"
295 W = 1
296 ALARM 3
297 RETURN

298 IF $9[1] = 48 THEN 300
299 PRINTS "Short, Connected
300 W = 0
301 RETURN

0 REM idle will be called, when the command line ends working
0 REM when the slave connection is closed, and when slave calls
0 REM timeouts, in any of those cases we will let the @ALARM
0 REM handle the slave mode stuff
0 REM idle used for slave connections, pairing or paired
@IDLE 302
302 L = 0;
303 IF M = 0 THEN 305;
0 REM IF M = 1 THEN we are turning off
304 RETURN

305 IF $3[3] <> 48 THEN 973;
306 IF $3[0] > 52 THEN 325;
307 IF W <> 0 THEN 489;
308 IF K = 1 THEN 322;
309 IF K = 2 THEN 323;
0 REM check for command line 
310 A = pioget($8[8]-48);
311 IF A = 1 THEN 313
312 GOTO 964

0 REM slave mode? 
313 IF $3[0] > 50 THEN 353

314 IF $3[1] = 49 THEN 318;
315 IF $3[0] = 50 THEN 320;
316 B = readcnt;
317 IF B > 120 THEN 417;
318 A = slave 5;
319 GOTO 373;
320 A = slave -5;
321 GOTO 373

322 A = slave-1
323 K = 0;
324 RETURN

325 IF $3[0] = 53 THEN 337
326 IF $3[0] = 54 THEN 330
327 IF $3[0] = 55 THEN 338
328 A = disconnect 1
329 $3[0] = 54
330 B = status
331 IF B > 0 THEN 333
332 GOSUB 909
333 A = pioset ($8[1]-48);
334 A = pioset ($8[0]-48)
335 A = pioclr ($8[0]-48)
336 ALARM 9
337 RETURN

338 A = pioset ($8[0]-48);
339 A = pioset ($8[1]-48)
340 A = pioclr ($8[1]-48);
341 B = status
342 IF B > 1 THEN 344
343 A = master $20
344 ALARM 4
345 RETURN

@PIN_CODE 346
346 IF $9[1] = 48 THEN 348
347 PRINTS "@PIN_CODE"
348 IF $23[0] = 50 THEN 351
349 $0=$11;
350 RETURN
351 A = getuniq $0
352 RETURN

0 REM ALARM code, handles modes stuff, LEDs and long button press 
@ALARM 353
353 IF N = 0 THEN 356;
354 A = pioclr ($8[1]-48)
355 A = pioset ($8[1]-48);

0 REM are we on automatic or manual?
356 IF $3[3] <> 48 THEN 816;

0 REM check if the command line is accesible or not.

357 A = pioget($8[8]-48);
358 IF A = 1 THEN 360;

0 REM Command Line is accessible.
359 GOTO 964

0 REM handle button press first of all.
360 IF W = 1 THEN 394;

361 IF H = 1 THEN 130;

362 IF $3[0] > 52 THEN 870;

0 REM now the led stuff, and finally we handle the state.
0 REM firstly see if we are connected, then do what you need
363 B = status;
364 IF B < 10000 THEN 366;
365 B = B - 10000;
366 IF B > 0 THEN 368;
367 GOTO 373;
0 REM ensure the leds are on
368 A = pioset ($8[0]-48);
369 A = pioset ($8[1]-48);
370 ALARM 5
371 RETURN

0 REM we are on automatic.
0 REM are we on automatic - manual?
372 IF $3[0] = 48 THEN 389;

0 REM LED SCHEMA:
0 REM CABLE 	SLAVE 	1 fast blink
0 REM SERVICE 	SLAVE 	2 fast blink
0 REM CABLE	MASTER 	3 fast blink
0 REM SERVICE	MASTER 	4 fast blink
373 A = pioset ($8[1]-48);
374 A = pioset ($8[0]-48)
375 A = pioclr ($8[0]-48);
0 REM are we on master or slave?
376 IF $3[0] > 50 THEN 381
0 REM ok we are on slave
0 REM CABLE 	SLAVE 1 fast BLINK
0 REM SERVICE 	SLAVE 2 fast BLINK

0 REM now are we on cable or service?
377 IF $3[1] = 48 THEN 380
0 REM service slave
378 A = pioset ($8[0]-48)
379 A = pioclr ($8[0]-48);
380 RETURN;

0 REM we are on master modes
381 FOR B = 0 TO 1
382 A = pioset ($8[0]-48)
383 A = pioclr ($8[0]-48
384 NEXT B
385 IF $3[1] = 48 THEN 432;
386 A = pioset ($8[0]-48)
387 A = pioclr ($8[0]-48);
388 GOTO 421;


0 REM manual idle code, this is the only mode that ends here.
389 B = pioset ($8[1]-48);
390 B = pioclr ($8[0]-48);
391 A = slave-1
392 K = 2
393 RETURN

0 REM this is a long button press, we have stuff to do
0 REM if we are connected, then we disconnect and reboot to unpaired
0 REM if we aren't then we must reboot and go to idle mode.
394 GOSUB 916;
395 W = 2
396 IF $39[3] = 49 THEN 408
397 IF $39[4] = 49 THEN 408

0 REM reboot 
398 $3[0] = 48
399 $3[1] = 48
400 IF $9[1] = 48 THEN 402
401 PRINTS"->Reboot\n\r";
402 A = pioclr($8[0]-48);
403 A = pioclr($8[1]-48);
404 W = 3
405 A = reboot
406 WAIT 3;
407 RETURN

0 REM disconnects, disconnect restarts @IDLE
408 ALARM 0
409 IF $9[1] = 48 THEN 411
410 PRINTS "-> Discconnect\n\r"
0 REM if we were paired, then we must unpair.
411 IF $3[0] = 50 THEN 414
412 IF $3[0] = 52 THEN 414
413 GOTO 415;
414 $3[0] = ($3[0] -1)
0 REM 307 A = disconnect 0
0 REM 308 A = disconnect 1
0 REM 309 A = cancel
415 $7 = "0"
416 GOTO 400

0 REM cable mode timeout
417 IF $9[1] = 48 THEN 419
418 PRINTS "Timeout\n\r";
419 ALARM 0;
420 GOTO 389;

0 REM service - master
421 A = strlen $7;
422 IF A > 1 THEN 426
423 A = inquiry 6
424 ALARM 8
425 RETURN

426 A = master $7
427 IF $3[1] = 48 THEN 429
428 $7 = "0"
0 REM master returns 0 if the connection was succesfull
0 REM or if we are still trying to connect.
429 IF A = 0 THEN 368
430 ALARM 8
431 RETURN

0 REM cable code, if we are not paired check for timeout.
432 IF $3[0] = 52 THEN 426
433 B = readcnt
434 IF B > 120 THEN 417
0 REM we are pairing as master,
435 GOTO 423;

0 REM this interrupt is launched when there is an incomming
0 REM slave connection
@SLAVE 436
436 A = pioget($8[8]-48);
437 IF A <> 1 THEN 465;
438 IF $9[1] = 48 THEN 440;
439 PRINTS "@SLAVE\n\r";
440 IF $3[0] = 54 THEN 907;
0 REM if we are not on slave mode, then we must ignore slave connections :D

441 IF $3[0] > 50 THEN 463;
442 IF $3[0] > 48 THEN 444;
443 GOTO 463

444 A = getconn $7
0 REM if we are on service-slave, and the PIN was a success
0 REM then this is our peer.
445 IF $3[1] = 49 THEN 453
0 REM cable-slave-paired, check address
446 IF $3[0] = 50 THEN 450

0 REM set to paired no matter who cames
447 $3[0] = 50
448 $4 = $7
449 GOTO 453

0 REM check address of the connection and allow
450 $0 = $4
451 B = strcmp $7
452 IF B <> 0 THEN 463

0 REM slave connected
0 REM set interrupts to connected mode.
0 REM green and blue LEDS on
0 REM read sensors
453 A = nextsns 1
454 $22[2] = 50
455 B = pioset ($8[1]-48)
456 B = pioset ($8[0]-48)
0 REM set RS232 power to on
457 A = pioset ($8[4]-48)
0 REM DTR set on, +5V
458 A = pioclr ($8[5]-48)
0 REM set interrupts to connected mode.
459 A = pioirq $14
0 REM connect RS232 to slave
460 ALARM 0
461 C = link 1
462 RETURN

0 REM disconnect and exit
463 A = disconnect 0
464 RETURN

0 REM the user has selected to enabled the command line.
0 REM does he really want to get into?
465 TIMEOUTS 5
466 INPUTS $0
467 A = strlen $0
468 IF A < 3 THEN 438
469 IF $0[A-3] <> 43 THEN 438
470 IF $0[A-1] <> 43 THEN 438
471 GOTO 556

@MASTER 472
0 REM successful master connection
472 IF $9[1] = 48 THEN 474
473 PRINTS "@MASTER\n\r";
474 IF $3[0] > 52 THEN 882
0 REM if we are on manual master, then we have some requests
475 IF $3[3] <> 52 THEN 483

0 REM manual mode master
476 $3[3] = 54
477 A = pioset ($8[1]-48);
478 A = pioset ($8[0]-48);
479 PRINTS"\n\rCONNECTED\n\r"
480 A = link 3
481 ALARM 5
482 RETURN

0 REM if we are not on master modes, then we must avoid this connection.
483 IF $3[0] > 50 THEN 486;
484 IF $3[0] > 48 THEN 498;
485 IF $3[0] = 48 THEN 498;
486 A = pioset ($8[1]-48);
487 A = pioset ($8[0]-48);
0 REM don't switch state in service mode
488 IF $3[1] = 49 THEN 490
0 REM set state master paired
489 $3[0] = 52

0 REM read sensors
490 A = nextsns 1
491 $22[2] = 50
492 A = pioset ($8[4]-48);
0 REM DTR set on
493 A = pioclr ($8[5]-48);
0 REM link
494 A = link 2
0 REM look for disconnect
495 ALARM 5
0 REM allow DSR interrupts
496 A = pioirq $14
497 RETURN

498 A = disconnect 1
499 RETURN

0 REM $500 RESERVED
500 RESERVED
0 REM inquiry code, only in mode pair_as_master
@INQUIRY 501
501 $500 = $0
502 IF $9[1] = 48 THEN 504
503 PRINTS "@INQUIRY\n\r";
504 IF $3[3] <> 51 THEN 509
505 PRINTS"\n\rFound device: "
506 PRINTS $500
507 ALARM 4
508 RETURN

509 $4 = $500;
510 $500 = $0[13];
511 IF $3[0] <> 51 THEN 514;
0 REM inquiry filter active
512 IF $3[2] = 48 THEN 514;
513 GOTO 515
514 RETURN

515 IF $9[1] = 48 THEN 518;
516 PRINTS "found "
517 PRINTS $4
0 REM check name of device
518 $0[0]=0;
519 PRINTV $500;
520 B = strcmp $5;
521 IF B <> 0 THEN 531;
522 $0 = $4
523 B = strcmp $6;
524 IF B <> 0 THEN 531

0 REM found one, try to connect, inquiry canceled automaticall
0 REM 447 GOSUB 485;
525 B = master $4;
0 REM if master busy keep stored address in $4, get next
526 IF B = 0 THEN 532;
0 REM master accepted, store address, restart alarms, give it 8 seconds to connect
0 REM corrected by mn
527 $7 = $4;
528 ALARM 8;
0 REM all on to indicate we have one
529 A = pioset ($8[1]-48);
530 A = pioset ($8[0]-48);
531 RETURN

0 REM get next result, give the inq result at least 2 sec time
532 GOSUB 534;
533 RETURN

0 REM blink sub-routine pair as master mode, blue-on green-off and reverse
534 IF J = 1 THEN 539;
535 J = 1;
536 A = pioset ($8[0]-48);
537 A = pioclr ($8[1]-48);
538 RETURN
539 A = pioclr ($8[0]-48);
540 A = pioset ($8[0]-48);
541 J = 0;
542 RETURN;

@CONTROL 543
0 REM remote request for DTR pin on the RS232
543 IF $0[0] < 128 THEN 546
544 A = uartcfg$0[0]
545 RETURN
546 IF $0[0] = 49 THEN 548;
547 A=pioset ($8[5]-48);
548 RETURN;
549 A=pioclr ($8[5]-48);
550 RETURN

0 REM read from Service slave.
0 REM result is on $551
0 REM 551 RESERVED FOR TEMP
0 REM C = $551[0]
551 RESERVED
552 $551[0] = 0;
553 INPUTS $551
554 C = $551[0]
555 RETURN

0 REM command line interface
556 ALARM 0
557 A = pioirq $14
558 A = pioclr ($8[0]-48);
559 A = pioclr ($8[1]-48);
560 $3[3] = 49
0 REM enable FTP again
561 A = enable 3
562 PRINTS "\r\nAIRcable OS "
563 PRINTS "command line v
564 PRINTS $1
565 PRINTS "\r\nType h to "
566 PRINTS "see the list of "
567 PRINTS "commands";
568 PRINTS "\n\rAIRcable> "
569 GOSUB 552;
570 A = status
571 IF A = 0 THEN 601

0 REM h: help, l: list,
0 REM n: name, p: pin, b: name filter, g: address filter
0 REM c: class of device, u: uart, d: date,
0 REM s: slave, i: inquiry, m: master, a: mode
0 REM o: obex
0 REM e: exit

0 REM help
574 IF C = 104 THEN 711;
0 REM info
575 IF C = 108 THEN 609;
0 REM name
576 IF C = 110 THEN 726;
0 REM pin
577 IF C = 112 THEN 731;
0 REM class
578 IF C = 99 THEN 735;
0 REM uart
579 IF C = 117 THEN 632;
0 REM date
580 IF C = 100 THEN 761;
0 REM inquiry
581 IF C = 105 THEN 830;
0 REM shell
582 IF C = 115 THEN 943;
0 REM master
583 IF C = 109 THEN 839;
0 REM obex
584 IF C = 111 THEN 771;
0 REM modes
585 IF C = 97 THEN 660;
0 REM exit
586 IF C = 101 THEN 600;
0 REM name filter
587 IF C = 98 THEN 751;
0 REM addr filter
588 IF C = 103 THEN 756;
0 REM hidden debug settings
589 IF C = 122 THEN 596;
0 REM reboot
590 IF C = 114 THEN 791;
0 REM relay mode pair
591 IF C = 106 THEN 855;
0 REM name/pin settings
592 IF C = 107 THEN 798;
0 REM PIO settings
593 IF C = 113 THEN 945
594 PRINTS"Command not found
595 GOTO 568;

596 PRINTS"Input settings: "
597 GOSUB 552
598 $9 = $551
599 GOTO 959

0 REM exit code, we end with slave-1 to ensure
0 REM that @SLAVE starts all again, and that
0 REM we start unvisible
600 PRINTS "Bye!!\n\r
601 GOSUB 136;
602 $3[3] = 48;
603 A = slave -1
604 A = disconnect 0
605 A = zerocnt
606 A = pioset($8[1]-48);
607 M = 0
608 RETURN

0 REM ----------------------- Listing Code ------------------------------------
609 PRINTS"Command Line v
610 PRINTS $1
611 PRINTS"\n\rName: ";
612 PRINTS $10;
613 PRINTS"\n\rPin: ";
614 PRINTS$11;
615 A = psget 0;
616 PRINTS"\n\rClass: ";
617 PRINTS $0;
618 PRINTS"\n\rBaud Rate: "
619 GOSUB 654
620 PRINTS"\n\rDate: ";
621 A = date $0;
622 PRINTS $0;
623 A = getaddr;
624 PRINTS"\n\rBT Address:
625 PRINTS $0
626 PRINTS"\n\rName Filter:
627 PRINTS $5;
628 PRINTS"\n\rAddr Filter:
629 PRINTS $6;
630 GOSUB 690
631 GOTO 568;

632 PRINTS"Enter new Baud Ra
633 PRINTS"te divide by 100,
634 PRINTS"or 0 for switches
635 PRINTS": "
636 GOSUB 552
637 $15 = $551
638 PRINTS"\n\r"
639 PRINTS"Parity settings:\n
640 PRINTS"\r0 for none\n\r
641 PRINTS"1 for even\n\r
642 PRINTS"2 for odd: "
643 GOSUB 552
644 A = $551[0]
645 $22[0] = A
646 PRINTS"\n\rStop Bits settin"
647 PRINTS"gs:\n\r0 for 1 stop
648 PRINTS" bit\n\r1 for 2 stop
649 PRINTS" bits:
650 GOSUB 552
651 A = $551[0]
652 $22[1] = A
653 GOTO 568

654 IF $15[0] = 48 THEN 658
655 PRINTS $15
656 PRINTS "00 bps
657 RETURN
658 PRINTS "External
659 RETURN

0 REM -------------------------- Modes chooser --------------------------------
0 REM the user should select between
0 REM 0: Manual
0 REM 1: Service Slave
0 REM 2: Service Master
0 REM 3: Cable Slave
0 REM 4: Cable Master
0 REM 5: Master Relay Mode
0 REM Mode:
660 PRINTS"Select new mode\n
661 PRINTS"\r0: Manual\n\r1:
662 PRINTS" Service Slave\n
663 PRINTS"\r2: Service Mast
664 PRINTS"er\n\r3: Cable Sl
665 PRINTS"ave\n\r4: Cable M
666 PRINTS"aster\n\rMode: "
667 GOSUB 552;
668 IF C = 48 THEN 676;
669 IF C = 49 THEN 679;
670 IF C = 50 THEN 682;
671 IF C = 51 THEN 685;
672 IF C = 52 THEN 688;
673 PRINTS"\n\rInvalid Option
674 GOTO 568;

0 REM idle
675 0010
676 $3 = $675
677 GOTO 568
0 REM service slave
678 1110
679 $3 = $678
680 GOTO 568
0 REM service master
681 3110
682 $3 = $681
683 GOTO 568
0 REM cable slave
684 1010
685 $3 = $684
686 GOTO 568
0 REM cable master
687 3010
688 $3 = $687
689 GOTO 568

0 REM -------------------------- Listing code ---------------------------------
690 PRINTS "\n\rMode: "
691 IF $3[0] > 52 THEN 709
692 IF $3[0] = 48 THEN 707
693 IF $3[1] = 48 THEN 696
694 PRINTS"Service - "
695 GOTO 697;
696 PRINTS"Cable - "
697 IF $3[0] >= 51 THEN 700;
698 PRINTS"Slave"
699 GOTO 701;
700 PRINTS"Master"
701 IF $3[0] = 50 THEN 705;
702 IF $3[0] = 52 THEN 705;
703 PRINTS"\n\rUnpaired"
704 RETURN
705 PRINTS"\n\rPaired"
706 RETURN
707 PRINTS"Idle"
708 RETURN
709 PRINTS"Relay Mode Master
710 RETURN

0 REM ----------------------- Help code ---------------------------------------
0 REM h: help, l: list,
0 REM n: name, p: pin, k: name/pin settings, 
0 REM b: name filter, g: address filter,
0 REM c: class of device, u: uart, d: date,
0 REM i: inquiry, m: master, a: mode,
0 REM o: obex, f: obexftp, j: relay mode pair,
0 REM e: exit, r: reboot, s: shell,
0 REM q: PIO settings
711 PRINTS"h: help, l: list,\n"
712 PRINTS"\rn: name, p: pin, "
713 PRINTS"k: name/pin setting"
714 PRINTS"s,\n\rb: name filte"
715 PRINTS"r, g: address filte"
716 PRINTS"r,\n\rc: class of d"
717 PRINTS"evice, u: uart, d: "
718 PRINTS"date,\n\ri: inquiry"
719 PRINTS", m: master, a: mode"
720 PRINTS",\n\ro: obex, "
721 PRINTS"j: relay mode "
722 PRINTS"pair,\n\re: exit, r:"
723 PRINTS" reboot, s: shell,\n"
724 PRINTS"\rq: PIO settings"
725 GOTO 568;

0 REM Name Function
726 PRINTS"New Name: "
727 GOSUB 552;
728 $10 = $551;
729 GOSUB 935
730 GOTO 568

0 REM Pin Function
731 PRINTS"New PIN: ";
732 GOSUB 552;
733 $11 = $551;
734 GOTO 568

735 PRINTS"Type the class of "
736 PRINTS"device as xxxx xxx"
737 PRINTS"x: "
738 GOSUB 552
739 $0[0] = 0;
740 PRINTV"@0000 =
741 PRINTV$551;
742 $551 = $0;
743 A = psget 0;
744 $39 =$0
745 $0[0]=0;
746 PRINTV $551;
747 $551 = $39[17]
748 PRINTV $551;
749 A = psset 3
750 GOTO 568

0 REM friendly name filter code
751 PRINTS"\r\rEnter the new na"
752 PRINTS"me filter: "
753 GOSUB 552
754 $5 = $551
755 GOTO 568;

0 REM addr filter code
756 PRINTS"Enter the new addr"
757 PRINTS"ess filter: "
758 GOSUB 552
759 $6 = $551
760 GOTO 568

0 REM date changing methods
761 PRINTS"Insert new dat
762 PRINTS"e, check the manua
763 PRINTS"l for formating: "
764 GOSUB 552;
765 A = strlen $551
766 IF A <> 16 THEN 769
767 A = setdate $551
768 GOTO 568
769 PRINTS"\n\rInvalid format
770 GOTO 568

0 REM activate Obex/ObexFTP
0 REM 0 Enabled only on command line
0 REM 1 Always enabled
0 REM 2 Always Disabled
771 PRINTS"Obex/ObexFTP setti"
772 PRINTS"ngs:\n\r0: Enabled "
773 PRINTS"only on command li"
774 PRINTS"ne\n\r1: Always Ena"
775 PRINTS"bled\n\r2: Always D"
776 PRINTS"isabled\n\rChoose "
777 PRINTS"Option: "
778 GOSUB 552
779 $9[2] = $551[0]
780 IF C = 50 THEN 786
781 $0[0] = 0
782 A = psget 6
783 $0[11] = 48
784 A = psset 3
785 GOTO 568
786 $0[0] = 0
787 A = psget 6
788 $0[11] = 54
789 A = psset 3
790 GOTO 568

0 REM reboot code
791 PRINTS"Rebooting, please "
792 PRINTS"do not disconnect "
793 PRINTS"electric power\n\r
794 $3[3] = 48
795 A = reboot
796 WAIT 2
797 RETURN

0 REM name/pin settings:
0 REM 0: Don't add anything,
0 REM 1: Add uniq to the name,
0 REM 2: Add uniq to the name, set pin to uniq.
798 PRINTS"Name/Pin settings:\n"
799 PRINTS"\r0: Don't add anyth"
800 PRINTS"ing,\n\r1: Add uniq "
801 PRINTS"to the name,\n\r2: "
802 PRINTS"Add uniq to the nam"
803 PRINTS"e, set pin to uniq: "
804 GOSUB 552
805 IF C < 48 THEN 809
806 IF C > 50 THEN 809
807 $23 = $551
808 GOTO 568

809 PRINTS"Invalid Option\n\r"
810 GOTO 798

0 REM ---------------------- Manual Modes code --------------------------------

811 PRINTS "\n\rThere is BT
812 PRINTS "activity, please
813 PRINTS "wait and try agai
814 PRINTS "n
815 GOTO 568;

0 REM ALARM for Manual modes, simply go to the command line.
0 REM we will not have leds any more.
816 IF $3[3] = 54 THEN 825
817 $3[3] = $3[5];
818 A = pioclr ($8[0]-48);
819 A = pioclr ($8[1]-48);
820 $3[3] = 49
821 ALARM 0
822 A = cancel
823 A = disconnect 1
824 GOTO 568

825 A = status
826 IF A > 10 THEN 828
827 GOTO 817

828 ALARM 5
829 RETURN

0 REM inquiry code
0 REM by default we inquiry for 10 seconds
830 GOSUB 916;
831 IF $39[0] = 49 THEN 811
832 PRINTS"Inquirying for "
833 PRINTS"16s. Please wait.
834 B = inquiry 10
835 $3[5] = $3[3];
836 $3[3] = 51;
837 ALARM 16
838 RETURN

0 REM master code
839 GOSUB 916;
840 IF $39[3] = 49 THEN 811
841 PRINTS"Please input "
842 PRINTS"the addr of your "
843 PRINTS"peer:
844 GOSUB 552
845 B = strlen$551
846 IF B<>12 THEN 852
847 $3[5] = $3[3]
848 B = master $551
849 ALARM 16
850 $3[3] = 52;
851 RETURN

852 PRINTS"Invalid add
853 PRINTS"r, try again.
854 GOTO 568;

0 REM ---------------------------- RELAY CODE ----------------------------------

0 REM relay mode pair
0 REM Enter the address of your peer: 
855 PRINTS"Enter the address "
856 PRINTS"of your peer: "
857 GOSUB 552;
858 A = strlen $551;
859 IF A = 12 THEN 862;
860 PRINTS"\n\rNot valid peer
861 GOTO 568
862 PRINTS"\n\rTrying to pair
863 $3[5] = $3[3];
864 $3[3] = 48;
865 $20 = $551
866 A = master $20
867 $3[0] = 53
868 ALARM 16
869 RETURN

0 REM relay mode alarm handler
0 REM first check for command line
870 IF $3[3] <> 48 THEN 556
871 ALARM 5
872 IF $3[0] = 53 THEN 816
873 B = status
874 IF $3[0] = 54 THEN 331
875 IF B < 1 THEN 328
876 IF $3[0] = 55 THEN 338
877 IF B > 10 THEN 371
878 A = disconnect 0
879 A = disconnect 1
880 $3[0] = 54
881 GOTO 709

882 IF $3[0] = 53 THEN 889
883 A = pioset ($8[1]-48);
884 A = pioset ($8[0]-48);
885 $3[0] = 56
886 A = link 3;
887 ALARM 4
888 RETURN
889 $3[0]=54
890 A = disconnect 1
891 PRINTS"\n\rPair successfull"
892 PRINTS"\n\rPlease choose "
893 PRINTS"which kind of relay "
894 PRINTS"you want:\n\r1: Serv"
895 PRINTS"ice Relay\n\r2: Cabl"
896 PRINTS"e Relay\n\rMode: "
897 ALARM 0
898 GOSUB 552
899 IF C = 49 THEN 903
900 IF C = 50 THEN 903
901 PRINTS"\n\rInvalid Option
902 GOTO 892
903 A = $551[0];
904 $3[4] = A;
905 $3[0] = 54;
906 GOTO 568

907 $3[0] = 55
908 GOTO 337

909 B = readcnt;
910 IF $3[4] = 50 THEN 913
911 A = slave 8
912 RETURN
913 IF B < 120 THEN 911
914 A = slave -8
915 RETURN


0 REM -------------------------- END RELAY CODE --------------------------------

0 REM convert status to a string
0 REM store the result on $44
916 B = status
917 $39[0] = 0;
918 $39 = "00000";
919 IF B < 10000 THEN 922;
920 $39[0] = 49;
921 B = B -10000;
922 IF B < 1000 THEN 925;
923 $39[1] = 49;
924 B = B -1000;
925 IF B < 100 THEN 928;
926 $39[2] = 49;
927 B = B -100;
928 IF B < 10 THEN 931;
929 $39[3] = 49;
930 B = B -10;
931 IF B < 1 THEN 933;
932 $39[4] = 49;
933 $39[5] = 0;
934 RETURN

935 $0[0] = 0;
936 PRINTV $10;
937 IF $23[0] = 48 THEN 940
0 REM this line is used by all the other devices.
0 REM REMEMBER TO UPDATE NUMBER, last was 955
938 GOSUB 961
939 PRINTV $39;
940 A = name $0;
941 RETURN

942 $3[0] = 48
943 A = shell
944 RETURN

945 PRINTS"Please Input PIO set"
946 PRINTS"tings.\n\rPlease che"
947 PRINTS"ck DOCs for More Inf"
948 PRINTS"ormation: "
949 GOSUB 552
950 A = strlen $551
951 IF A < 10 THEN  955
952 $12 = $551
953 $8[0] = 122
954 GOTO 791
955 PRINTS"Option is invalid, C"
956 PRINTS"heck the DOCs again"
957 PRINTS"\n\r"
958 GOTO 568

959 Z = $9[0]-48
960 GOTO 568

961 PRINTV"_v"
962 $39 = $1
963 RETURN

964 B = status
965 IF B > 0 THEN 971
0 REM to show the user the command line can be accessed, we do a long blink
966 A = pioset($8[1]-48);
967 A = pioset($8[0]-48)
968 A = pioclr($8[0]-48);
969 A = slave 5
970 RETURN

971 ALARM 5
972 RETURN

973 $3[3] = 48
974 GOTO 353

